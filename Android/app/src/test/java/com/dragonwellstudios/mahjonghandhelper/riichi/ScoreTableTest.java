package com.dragonwellstudios.mahjonghandhelper.riichi;

import junit.framework.Assert;

import org.junit.Test;

/**
 * Created by Luke Powell on 10/5/15.
 *
 */
public class ScoreTableTest {

    //region CONSTANTS
    //Array of the base points generated by each incremental han value
    public int[][] basePoints = {
        {160, 200, 240, 320, 400, 480, 560, 640, 720, 800, 880},
        {320, 400, 480, 640, 800, 960, 1120, 1280, 1440, 1600, 1760},
        {640, 800, 960, 1280, 1600, 1920, 2240, 2560, 2880, 3200, 3520},
        {1280, 1600, 1920, 2560, 3200, 3840, 4480, 5120, 5760, 6400, 7040},
        {2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000},
        {3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000},
        {3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000},
        {4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000},
        {4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000},
        {4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000},
        {6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000},
        {6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000},
        {8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000}
    };

    //Values of fu we actually care about
    public int validFu[] = {20,25,30,40,50,60,70,80,90,100,110};

    public int[][] dealerRonNoKirage = {
            {1000, 1200, 1500, 2000, 2400, 2900, 3400, 3900, 4400, 4800, 5300},
            {2000, 2400, 2900, 3900, 4800, 5800, 6800, 7700, 8700, 9600, 10600},
            {3900, 4800, 5800, 7700, 9600, 11600, 12000, 12000, 12000, 12000, 12000},
            {7700, 9600, 11600, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000},
            {18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000, 18000},
            {24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000},
            {24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000},
            {24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000},
            {36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000},
            {36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000, 36000},
            {48000, 48000, 48000, 48000, 48000, 48000, 48000, 48000, 48000, 48000, 48000}
    };

    public int[][] dealerTsumoNoKirage = {
            {400, 400, 500, 700, 800, 1000, 1200, 1300, 1500, 1600, 1800},
            {700, 800, 1000, 1300, 1600, 2000, 2300, 2600, 2900, 3200, 3600},
            {1300, 1600, 2000, 2600, 3200, 3900, 4000, 4000, 4000, 4000, 4000},
            {2600, 3200, 3900, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000},
            {4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000},
            {6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000},
            {6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000, 6000},
            {8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000},
            {8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000},
            {8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000},
            {12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000}
    };

    public int[][] nonDealerRonNoKirage = {
            {700, 800, 1000, 1300, 1600, 2000, 2300, 2600, 2900, 3200, 3600},
            {1300, 1600, 2000, 2600, 3200, 3900, 4500, 5200, 5800, 6400, 7100},
            {2600, 3200, 3900, 5200, 6400, 7700, 8000, 8000, 8000, 8000, 8000},
            {5200, 6400, 7700, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000},
            {8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000, 8000},
            {12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000, 12000},
            {16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000},
            {16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000},
            {16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000, 16000},
            {24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000},
            {24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000, 24000},
            {32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000, 32000}
    };

    public int[][][] nonDealerTsumoNoKirage = {
            {

                    {200, 400}, {200, 400}, {300, 500}, {400, 700}, {400, 800}, {500, 1000}, {600, 1200}, {700, 1300},
                    {800, 1500}, {800, 1600}, {900, 1800}
            },
            {
                    {400, 700}, {400, 800}, {500, 1000}, {700, 1300}, {800, 1600}, {1000, 2000}, {1200, 2300},
                    {1300, 2600}, {1500, 2900}, {1600, 3200}, {1800, 3600}
            },
            {
                    {700, 1300}, {800, 1600}, {1000, 2000}, {1300, 2600}, {1600, 3200}, {2000, 3900},
                    {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}
            },
            {
                    {1300, 2600}, {1600, 3200}, {2000, 3900}, {2000, 4000}, {2000, 4000}, {2000, 4000},
                    {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000},
            },
            {
                    {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000},
                    {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}, {2000, 4000}
            },
            {
                    {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000},
                    {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}
            },
            {
                    {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000},
                    {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}, {3000, 6000}
            },
            {
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000},
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}
            },
            {
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000},
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}
            },
            {
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000},
                    {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}, {4000, 8000}
            },
            {
                    {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000},
                    {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}
            },
            {
                    {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000},
                    {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}, {6000, 12000}
            },
            {
                    {8000, 16000}, {8000, 16000}, {8000, 16000}, {8000, 16000}, {8000, 16000}, {8000, 16000},
                    {8000, 16000}, {8000, 16000}, {8000, 16000}, {8000, 16000}, {8000, 16000}
            }

    };
    //endregion



    @Test
    public void testGetBasePoints() throws Exception {
        ScoreTable table = new ScoreTable(null);
        for(int han = 0; han < 13; ++han){
            int i = 0;
            for(int fu : validFu){
                int basePoint = table.getBasePoints(han+1,validFu[i]);
                Assert.assertEquals(basePoints[han][i],basePoint);
                ++i;
            }
        }
    }

    @Test
    public void testGetPayout() throws Exception {
        ScoreTable table = new ScoreTable(null);
        for (int han = 0; han < 13; ++han) {
            int i = 0;
            for (int fu : validFu) {
                Payout payout = table.getPayout(han + 1, fu, true, true);

                Assert.assertEquals(dealerRonNoKirage[han][i],
                        payout.getPayout(Payout.PAYOUT_ALL_OR_SINGLE));

                ++i;
            }
        }

        for (int han = 0; han < 13; ++han) {
            int i = 0;
            for (int fu : validFu) {
                Payout payout = table.getPayout(han + 1, fu, true, false);

                Assert.assertEquals(dealerTsumoNoKirage[han][i],
                        payout.getPayout(Payout.PAYOUT_ALL_OR_SINGLE));

                ++i;
            }
        }

        for (int han = 0; han < 13; ++han) {
            int i = 0;
            for (int fu : validFu) {
                Payout payout = table.getPayout(han + 1, fu, false, true);

                Assert.assertEquals(nonDealerRonNoKirage[han][i],
                        payout.getPayout(Payout.PAYOUT_ALL_OR_SINGLE));

                ++i;
            }
        }

        for (int han = 0; han < 13; ++han) {
            int i = 0;
            for (int fu : validFu) {
                Payout payout = table.getPayout(han + 1, fu, false, false);

                Assert.assertEquals(nonDealerTsumoNoKirage[han][i][1],
                        payout.getPayout(Payout.PAYOUT_DEALER));

                Assert.assertEquals(nonDealerTsumoNoKirage[han][i][0],
                        payout.getPayout(Payout.PAYOUT_NONDEALER));

                ++i;
            }
        }
    }
}